
(fast-lock-cache-data 3 (quote (16072 . 22287)) (quote nil) (quote nil) (quote (t ("^\\(\\sw+\\)[ 	]*(" (1 font-lock-function-name-face)) ("^#[ 	]*error[ 	]+\\(.+\\)" (1 font-lock-warning-face prepend)) ("^#[ 	]*\\(import\\|include\\)[ 	]*\\(<[^>\"
]*>?\\)" (2 font-lock-string-face)) ("^#[ 	]*define[ 	]+\\(\\sw+\\)(" (1 font-lock-function-name-face)) ("^#[ 	]*\\(elif\\|if\\)\\>" ("\\<\\(defined\\)\\>[ 	]*(?\\(\\sw+\\)?" nil nil (1 font-lock-builtin-face) (2 font-lock-variable-name-face nil t))) ("^#[ 	]*\\(define\\|e\\(?:l\\(?:if\\|se\\)\\|ndif\\|rror\\)\\|file\\|i\\(?:f\\(?:n?def\\)?\\|nclude\\)\\|line\\|pragma\\|undef\\)\\>[ 	!]*\\(\\sw+\\)?" (1 font-lock-builtin-face) (2 font-lock-variable-name-face nil t)) ("\\<\\(c\\(?:har\\|omplex\\)\\|double\\|float\\|int\\|long\\|s\\(?:hort\\|igned\\)\\|\\(?:unsigne\\|voi\\)d\\|FILE\\|\\sw+_t\\|Lisp_Object\\)\\>" (0 font-lock-type-face)) ("\\<\\(auto\\|break\\|con\\(?:st\\|tinue\\)\\|do\\|e\\(?:lse\\|xtern\\)\\|for\\|if\\|re\\(?:gister\\|strict\\|turn\\)\\|s\\(?:izeof\\|tatic\\|witch\\)\\|typedef\\|\\(?:volat\\|wh\\)ile\\|enum\\|struct\\|union\\)\\>" (0 font-lock-keyword-face)) ("\\<\\(case\\|goto\\)\\>" (1 font-lock-keyword-face) ("\\(-[0-9]+\\|\\sw+\\)" (save-excursion (skip-chars-forward "^:
") (point)) nil (1 font-lock-constant-face nil t))) (":" ("^[ 	]*\\(\\sw+\\)[ 	]*:[ 	]*$" (beginning-of-line) (end-of-line) (1 font-lock-constant-face))) ("\\<\\(c\\(?:har\\|omplex\\)\\|double\\|float\\|int\\|long\\|s\\(?:hort\\|igned\\)\\|\\(?:unsigne\\|voi\\)d\\|FILE\\|\\sw+_t\\|Lisp_Object\\)\\>\\([ 	*&]+\\sw+\\>\\)*" (font-lock-match-c-style-declaration-item-and-skip-to-next (goto-char (or (match-beginning 2) (match-end 1))) (goto-char (match-end 1)) (1 (if (match-beginning 2) font-lock-function-name-face font-lock-variable-name-face)))) ("\\<\\(enum\\|struct\\|union\\)\\>[ 	]*\\(\\sw+\\)?" (1 font-lock-keyword-face) (2 font-lock-type-face nil t) (font-lock-match-c-style-declaration-item-and-skip-to-next nil (if (match-end 2) (goto-char (match-end 2))) (1 (if (match-beginning 2) font-lock-function-name-face font-lock-variable-name-face) nil t))) ("\\(}\\)[ 	*]*\\sw" (font-lock-match-c-style-declaration-item-and-skip-to-next (goto-char (match-end 1)) nil (1 font-lock-type-face))) ("^\\(\\sw+\\)\\>\\([ 	*]+\\sw+\\>\\)*" (1 font-lock-type-face) (font-lock-match-c-style-declaration-item-and-skip-to-next (goto-char (or (match-beginning 2) (match-end 1))) nil (1 (if (match-beginning 2) font-lock-function-name-face font-lock-variable-name-face)))))) (quote ((font-lock-type-face 1454 1457 1445 1453) (font-lock-keyword-face 1438 1444) (font-lock-function-name-face 2069 2074 2030 2038 1343 1350 1283 1290 456 460 373 377) (font-lock-variable-name-face 1458 1470 662 671 336 344) (font-lock-string-face 1326 1334 1253 1263 427 431 354 363 321 330 301 311 281 291 264 271) (font-lock-builtin-face 2061 2067 2022 2028 1375 1380 1336 1342 1318 1325 1311 1315 1276 1282 1245 1252 659 661 467 472 449 455 443 447 366 372 346 353 333 335 313 320 293 300 273 280 256 263) (font-lock-comment-face 1961 2020 1521 1959 1486 1519 1382 1437 1265 1274 730 1242 673 728 474 657 1 253))))
